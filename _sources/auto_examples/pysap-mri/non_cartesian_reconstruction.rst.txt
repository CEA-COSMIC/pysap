
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/non_cartesian_reconstruction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_non_cartesian_reconstruction.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_non_cartesian_reconstruction.py:


Neuroimaging non-cartesian reconstruction
=========================================

Author: Chaithya G R

In this tutorial we will reconstruct an MRI image from non-cartesian kspace
measurements.

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 2D brain slice
and the acquisition cartesian scheme.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

Package import

.. GENERATED FROM PYTHON SOURCE LINES 18-31

.. code-block:: default

    from mri.operators import NonCartesianFFT, WaveletUD2
    from mri.operators.utils import convert_locations_to_mask, \
        gridded_inverse_fourier_transform_nd
    from mri.reconstructors import SingleChannelReconstructor
    from pysap.data import get_sample_data

    # Third party import
    from modopt.math.metrics import ssim
    from modopt.opt.linear import Identity
    from modopt.opt.proximity import SparseThreshold
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Loading input data

.. GENERATED FROM PYTHON SOURCE LINES 33-40

.. code-block:: default

    image = get_sample_data('2d-mri').data.astype(np.complex64)

    # Obtain MRI non-cartesian mask
    radial_mask = get_sample_data("mri-radial-samples")
    kspace_loc = radial_mask.data









.. GENERATED FROM PYTHON SOURCE LINES 41-42

View Input

.. GENERATED FROM PYTHON SOURCE LINES 42-50

.. code-block:: default

    plt.subplot(1, 2, 1)
    plt.imshow(np.abs(image), cmap='gray')
    plt.title("MRI Data")
    plt.subplot(1, 2, 2)
    plt.imshow(convert_locations_to_mask(kspace_loc, image.shape), cmap='gray')
    plt.title("K-space Sampling Mask")
    plt.show()




.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_001.png
   :alt: MRI Data, K-space Sampling Mask
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_001.png, /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_001_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/non_cartesian_reconstruction.py:48: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 51-57

Generate the kspace
-------------------

From the 2D brain slice and the acquisition mask, we retrospectively
undersample the k-space using a radial acquisition mask
We then reconstruct the zero order solution as a baseline

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default


    # Get the locations of the kspace samples and the associated observations
    fourier_op = NonCartesianFFT(samples=kspace_loc, shape=image.shape, density_comp='cell_count')
    kspace_obs = fourier_op.op(image)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/mrinufft/_utils.py:36: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 63-64

Gridded solution

.. GENERATED FROM PYTHON SOURCE LINES 64-72

.. code-block:: default

    grid_space = np.linspace(-0.5, 0.5, num=image.shape[0])
    grid2D = np.meshgrid(grid_space, grid_space)
    grid_soln = gridded_inverse_fourier_transform_nd(kspace_loc, kspace_obs,
                                                     tuple(grid2D), 'linear')
    base_ssim = ssim(grid_soln, image)
    plt.imshow(np.abs(grid_soln), cmap='gray')
    plt.title('Gridded solution : SSIM = ' + str(np.around(base_ssim, 2)))
    plt.show()



.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_002.png
   :alt: Gridded solution : SSIM = 0.54
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_002.png, /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_002_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/non_cartesian_reconstruction.py:71: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 73-78

FISTA optimization
------------------

We now want to refine the zero order solution using a FISTA optimization.
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 78-94

.. code-block:: default


    # Setup the operators
    linear_op = WaveletUD2(
        wavelet_id=24,
        nb_scale=4,
    )
    regularizer_op = SparseThreshold(Identity(), 2e-8, thresh_type="soft")
    # Setup Reconstructor
    reconstructor = SingleChannelReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/mrinufft/operators/base.py:376: UserWarning: Data should be of dtype complex64 (is complex128). Casting it for you.
      warnings.warn(
    Lipschitz constant is 1.6881252893351327e-05
    The lipschitz constraint is satisfied




.. GENERATED FROM PYTHON SOURCE LINES 95-96

Run the FISTA reconstruction and view results

.. GENERATED FROM PYTHON SOURCE LINES 96-105

.. code-block:: default

    image_rec, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_obs,
        optimization_alg='fista',
        num_iterations=30,
    )

    recon_ssim = ssim(image_rec, image)
    plt.imshow(np.abs(image_rec), cmap='gray')
    plt.title('Iterative Reconstruction : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()


.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_003.png
   :alt: Iterative Reconstruction : SSIM = nan
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_003.png, /auto_examples/pysap-mri/images/sphx_glr_non_cartesian_reconstruction_003_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
     - mu:  2e-08
     - lipschitz constant:  1.6881252893351327e-05
     - data:  (512, 512)
     - wavelet:  <mri.operators.linear.wavelet.WaveletUD2 object at 0x7fcc209d86d0> - 4
     - max iterations:  30
     - image variable shape:  (512, 512)
     - alpha variable shape:  (2621440,)
    ----------------------------------------
    Starting optimization...
      0%|          | 0/30 [00:00<?, ?it/s]/volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/mrinufft/operators/base.py:376: UserWarning: Data should be of dtype complex64 (is complex128). Casting it for you.
      warnings.warn(
      3%|3         | 1/30 [00:01<00:51,  1.79s/it]      7%|6         | 2/30 [00:03<00:49,  1.78s/it]     10%|#         | 3/30 [00:05<00:48,  1.79s/it]     13%|#3        | 4/30 [00:07<00:46,  1.79s/it]     17%|#6        | 5/30 [00:09<00:45,  1.81s/it]     20%|##        | 6/30 [00:10<00:43,  1.81s/it]     23%|##3       | 7/30 [00:12<00:41,  1.81s/it]     27%|##6       | 8/30 [00:14<00:40,  1.82s/it]     30%|###       | 9/30 [00:16<00:38,  1.83s/it]     33%|###3      | 10/30 [00:18<00:36,  1.81s/it]     37%|###6      | 11/30 [00:19<00:34,  1.81s/it]     40%|####      | 12/30 [00:21<00:32,  1.80s/it]     43%|####3     | 13/30 [00:23<00:30,  1.79s/it]     47%|####6     | 14/30 [00:25<00:28,  1.79s/it]     50%|#####     | 15/30 [00:26<00:26,  1.78s/it]     53%|#####3    | 16/30 [00:28<00:25,  1.80s/it]     57%|#####6    | 17/30 [00:30<00:23,  1.81s/it]     60%|######    | 18/30 [00:32<00:21,  1.81s/it]     63%|######3   | 19/30 [00:34<00:19,  1.81s/it]     67%|######6   | 20/30 [00:36<00:18,  1.82s/it]     70%|#######   | 21/30 [00:37<00:16,  1.82s/it]     73%|#######3  | 22/30 [00:39<00:14,  1.81s/it]     77%|#######6  | 23/30 [00:41<00:12,  1.80s/it]     80%|########  | 24/30 [00:43<00:10,  1.80s/it]     83%|########3 | 25/30 [00:45<00:09,  1.81s/it]     87%|########6 | 26/30 [00:47<00:07,  1.84s/it]     90%|######### | 27/30 [00:48<00:05,  1.83s/it]     93%|#########3| 28/30 [00:50<00:03,  1.83s/it]     97%|#########6| 29/30 [00:52<00:01,  1.83s/it]    100%|##########| 30/30 [00:54<00:00,  1.83s/it]    100%|##########| 30/30 [00:54<00:00,  1.81s/it]
     - final iteration number:  30
     - final log10 cost value:  6.0
     - converged:  False
    Done.
    Execution time:  54.351169341709465  seconds
    ----------------------------------------
    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/modopt/math/metrics.py:42: RuntimeWarning: invalid value encountered in divide
      return (img - min_img) / (max_img - min_img)
    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/non_cartesian_reconstruction.py:105: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  37.306 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_non_cartesian_reconstruction.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: non_cartesian_reconstruction.py <non_cartesian_reconstruction.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: non_cartesian_reconstruction.ipynb <non_cartesian_reconstruction.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
