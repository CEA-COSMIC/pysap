
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/CalibrationlessReconstruction_GL_Cartesian.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_CalibrationlessReconstruction_GL_Cartesian.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_CalibrationlessReconstruction_GL_Cartesian.py:


Cartesian Calibrationless Reconstruction using GroupLASSO Regularizer
==============================================================

Author: Chaithya G R

In this tutorial we will reconstruct an MRI image from cartesian kspace
measurements.

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 2D parallel MRI
brain slice on 32 channels and the acquisition cartesian scheme.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

Package import

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: default

    from mri.operators import FFT, WaveletN
    from mri.reconstructors import CalibrationlessReconstructor
    from pysap.data import get_sample_data

    # Third party import
    from modopt.opt.proximity import GroupLASSO
    from modopt.math.metrics import ssim
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Loading input data

.. GENERATED FROM PYTHON SOURCE LINES 30-35

.. code-block:: default

    cartesian_ref_image = get_sample_data('2d-pmri').data
    image = np.linalg.norm(cartesian_ref_image, axis=0)
    # Obtain MRI cartesian mask
    mask = get_sample_data("cartesian-mri-mask").data








.. GENERATED FROM PYTHON SOURCE LINES 36-37

View Input

.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: default

    plt.subplot(1, 2, 1)
    plt.imshow(np.abs(image), cmap='gray')
    plt.title("MRI Data")
    plt.subplot(1, 2, 2)
    plt.imshow(mask, cmap='gray')
    plt.title("K-space Sampling Mask")
    plt.show()




.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_001.png
   :alt: MRI Data, K-space Sampling Mask
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_001.png, /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_001_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/CalibrationlessReconstruction_GL_Cartesian.py:43: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 46-52

Generate the kspace
-------------------

From the 2D brain slice and the acquisition mask, we retrospectively
undersample the k-space using a cartesian acquisition mask
We then reconstruct the zero order solution as a baseline

.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: default


    # Get the locations of the kspace samples and the associated observations
    fourier_op = FFT(mask=mask, shape=image.shape,
                     n_coils=cartesian_ref_image.shape[0])
    kspace_obs = fourier_op.op(cartesian_ref_image)








.. GENERATED FROM PYTHON SOURCE LINES 59-60

Zero order solution

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default

    zero_soln = np.linalg.norm(fourier_op.adj_op(kspace_obs), axis=0)
    base_ssim = ssim(zero_soln, image)
    plt.imshow(np.abs(zero_soln), cmap='gray')
    plt.title('Zero Order Solution : SSIM = ' + str(np.around(base_ssim, 2)))
    plt.show()




.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_002.png
   :alt: Zero Order Solution : SSIM = 0.83
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_002.png, /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_002_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/CalibrationlessReconstruction_GL_Cartesian.py:64: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 67-72

FISTA optimization
------------------

We now want to refine the zero order solution using a FISTA optimization.
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 72-89

.. code-block:: default


    # Setup the operators
    linear_op = WaveletN(
        wavelet_name='sym8',
        nb_scale=4,
        n_coils=cartesian_ref_image.shape[0],
    )
    coeffs = linear_op.op(cartesian_ref_image)
    regularizer_op = GroupLASSO(weights=6e-8)
    # Setup Reconstructor
    reconstructor = CalibrationlessReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
    Lipschitz constant is 1.1
    The lipschitz constraint is satisfied




.. GENERATED FROM PYTHON SOURCE LINES 90-91

Run the FISTA reconstruction and view results

.. GENERATED FROM PYTHON SOURCE LINES 91-101

.. code-block:: default

    image_rec, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_obs,
        optimization_alg='fista',
        num_iterations=100,
    )
    image_rec = np.linalg.norm(image_rec, axis=0)
    recon_ssim = ssim(image_rec, image)
    plt.imshow(np.abs(image_rec), cmap='gray')
    plt.title('Iterative Reconstruction : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()



.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_003.png
   :alt: Iterative Reconstruction : SSIM = 0.89
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_003.png, /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_GL_Cartesian_003_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
     - mu:  6e-08
     - lipschitz constant:  1.1
     - data:  (512, 512)
     - wavelet:  <mri.operators.linear.wavelet.WaveletN object at 0x7fcc201cbdc0> - 4
     - max iterations:  100
     - image variable shape:  (512, 512)
     - alpha variable shape:  (32, 291721)
    ----------------------------------------
    Starting optimization...
      0%|          | 0/100 [00:00<?, ?it/s]      1%|1         | 1/100 [00:02<03:28,  2.11s/it]      2%|2         | 2/100 [00:04<03:27,  2.11s/it]      3%|3         | 3/100 [00:06<03:24,  2.11s/it]      4%|4         | 4/100 [00:08<03:22,  2.11s/it]      5%|5         | 5/100 [00:10<03:20,  2.11s/it]      6%|6         | 6/100 [00:12<03:18,  2.11s/it]      7%|7         | 7/100 [00:14<03:16,  2.11s/it]      8%|8         | 8/100 [00:16<03:14,  2.11s/it]      9%|9         | 9/100 [00:18<03:11,  2.11s/it]     10%|#         | 10/100 [00:21<03:09,  2.11s/it]     11%|#1        | 11/100 [00:23<03:08,  2.11s/it]     12%|#2        | 12/100 [00:25<03:05,  2.11s/it]     13%|#3        | 13/100 [00:27<03:03,  2.11s/it]     14%|#4        | 14/100 [00:29<03:01,  2.11s/it]     15%|#5        | 15/100 [00:31<02:59,  2.11s/it]     16%|#6        | 16/100 [00:33<02:57,  2.12s/it]     17%|#7        | 17/100 [00:35<02:55,  2.11s/it]     18%|#8        | 18/100 [00:38<02:53,  2.11s/it]     19%|#9        | 19/100 [00:40<02:51,  2.11s/it]     20%|##        | 20/100 [00:42<02:49,  2.11s/it]     21%|##1       | 21/100 [00:44<02:47,  2.11s/it]     22%|##2       | 22/100 [00:46<02:44,  2.11s/it]     23%|##3       | 23/100 [00:48<02:42,  2.11s/it]     24%|##4       | 24/100 [00:50<02:40,  2.11s/it]     25%|##5       | 25/100 [00:52<02:37,  2.10s/it]     26%|##6       | 26/100 [00:54<02:35,  2.11s/it]     27%|##7       | 27/100 [00:56<02:33,  2.11s/it]     28%|##8       | 28/100 [00:59<02:32,  2.11s/it]     29%|##9       | 29/100 [01:01<02:30,  2.11s/it]     30%|###       | 30/100 [01:03<02:27,  2.11s/it]     31%|###1      | 31/100 [01:05<02:25,  2.11s/it]     32%|###2      | 32/100 [01:07<02:23,  2.11s/it]     33%|###3      | 33/100 [01:09<02:21,  2.11s/it]     34%|###4      | 34/100 [01:11<02:18,  2.10s/it]     35%|###5      | 35/100 [01:13<02:16,  2.10s/it]     36%|###6      | 36/100 [01:15<02:14,  2.10s/it]     37%|###7      | 37/100 [01:18<02:12,  2.10s/it]     38%|###8      | 38/100 [01:20<02:10,  2.10s/it]     39%|###9      | 39/100 [01:22<02:08,  2.11s/it]     40%|####      | 40/100 [01:24<02:06,  2.11s/it]     41%|####1     | 41/100 [01:26<02:04,  2.11s/it]     42%|####2     | 42/100 [01:28<02:02,  2.11s/it]     43%|####3     | 43/100 [01:30<02:00,  2.11s/it]     44%|####4     | 44/100 [01:32<01:57,  2.11s/it]     45%|####5     | 45/100 [01:34<01:55,  2.10s/it]     46%|####6     | 46/100 [01:37<01:53,  2.10s/it]     47%|####6     | 47/100 [01:39<01:51,  2.10s/it]     48%|####8     | 48/100 [01:41<01:49,  2.10s/it]     49%|####9     | 49/100 [01:43<01:47,  2.10s/it]     50%|#####     | 50/100 [01:45<01:45,  2.10s/it]     51%|#####1    | 51/100 [01:47<01:43,  2.11s/it]     52%|#####2    | 52/100 [01:49<01:41,  2.11s/it]     53%|#####3    | 53/100 [01:51<01:38,  2.11s/it]     54%|#####4    | 54/100 [01:53<01:36,  2.11s/it]     55%|#####5    | 55/100 [01:55<01:34,  2.11s/it]     56%|#####6    | 56/100 [01:58<01:32,  2.11s/it]     57%|#####6    | 57/100 [02:00<01:30,  2.10s/it]     58%|#####8    | 58/100 [02:02<01:28,  2.11s/it]     59%|#####8    | 59/100 [02:04<01:26,  2.11s/it]     60%|######    | 60/100 [02:06<01:24,  2.11s/it]     61%|######1   | 61/100 [02:08<01:22,  2.11s/it]     62%|######2   | 62/100 [02:10<01:19,  2.10s/it]     63%|######3   | 63/100 [02:12<01:17,  2.11s/it]     64%|######4   | 64/100 [02:14<01:15,  2.11s/it]     65%|######5   | 65/100 [02:17<01:13,  2.11s/it]     66%|######6   | 66/100 [02:19<01:11,  2.11s/it]     67%|######7   | 67/100 [02:21<01:09,  2.11s/it]     68%|######8   | 68/100 [02:23<01:07,  2.11s/it]     69%|######9   | 69/100 [02:25<01:05,  2.11s/it]     70%|#######   | 70/100 [02:27<01:03,  2.10s/it]     71%|#######1  | 71/100 [02:29<01:00,  2.10s/it]     72%|#######2  | 72/100 [02:31<00:58,  2.10s/it]     73%|#######3  | 73/100 [02:33<00:56,  2.10s/it]     74%|#######4  | 74/100 [02:35<00:54,  2.10s/it]     75%|#######5  | 75/100 [02:38<00:52,  2.10s/it]     76%|#######6  | 76/100 [02:40<00:50,  2.10s/it]     77%|#######7  | 77/100 [02:42<00:48,  2.10s/it]     78%|#######8  | 78/100 [02:44<00:46,  2.10s/it]     79%|#######9  | 79/100 [02:46<00:44,  2.10s/it]     80%|########  | 80/100 [02:48<00:42,  2.11s/it]     81%|########1 | 81/100 [02:50<00:40,  2.11s/it]     82%|########2 | 82/100 [02:52<00:37,  2.11s/it]     83%|########2 | 83/100 [02:54<00:35,  2.11s/it]     84%|########4 | 84/100 [02:56<00:33,  2.10s/it]     85%|########5 | 85/100 [02:59<00:31,  2.10s/it]     86%|########6 | 86/100 [03:01<00:29,  2.10s/it]     87%|########7 | 87/100 [03:03<00:27,  2.10s/it]     88%|########8 | 88/100 [03:05<00:25,  2.10s/it]     89%|########9 | 89/100 [03:07<00:23,  2.10s/it]     90%|######### | 90/100 [03:09<00:20,  2.10s/it]     91%|#########1| 91/100 [03:11<00:18,  2.10s/it]     92%|#########2| 92/100 [03:13<00:16,  2.10s/it]     93%|#########3| 93/100 [03:15<00:14,  2.10s/it]     94%|#########3| 94/100 [03:17<00:12,  2.10s/it]     95%|#########5| 95/100 [03:20<00:10,  2.10s/it]     96%|#########6| 96/100 [03:22<00:08,  2.10s/it]     97%|#########7| 97/100 [03:24<00:06,  2.10s/it]     98%|#########8| 98/100 [03:26<00:04,  2.10s/it]     99%|#########9| 99/100 [03:28<00:02,  2.10s/it]    100%|##########| 100/100 [03:30<00:00,  2.10s/it]    100%|##########| 100/100 [03:30<00:00,  2.11s/it]
     - final iteration number:  100
     - final log10 cost value:  6.0
     - converged:  False
    Done.
    Execution time:  210.58583804266527  seconds
    ----------------------------------------
    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/CalibrationlessReconstruction_GL_Cartesian.py:100: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  31.552 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_CalibrationlessReconstruction_GL_Cartesian.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: CalibrationlessReconstruction_GL_Cartesian.py <CalibrationlessReconstruction_GL_Cartesian.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: CalibrationlessReconstruction_GL_Cartesian.ipynb <CalibrationlessReconstruction_GL_Cartesian.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
