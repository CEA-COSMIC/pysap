
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/cartesian_reconstruction_3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction_3d.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_cartesian_reconstruction_3d.py:


3D Neuroimaging cartesian reconstruction
========================================

Author: LElgueddari

In this tutorial we will reconstruct an MRI image from the sparse 3D kspace
measurements.

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically the 3D orange
and the cartesian acquisition scheme.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

Package import

.. GENERATED FROM PYTHON SOURCE LINES 18-31

.. code-block:: default

    from modopt.math.metrics import ssim
    from mri.operators import FFT, WaveletN
    from mri.operators.utils import convert_mask_to_locations
    from mri.reconstructors import SingleChannelReconstructor
    from pysap.data import get_sample_data
    import pysap

    # Third party import
    from modopt.opt.linear import Identity
    from modopt.opt.proximity import SparseThreshold
    import numpy as np
    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 32-33

Loading input data and convert it into a single channel using Sum-Of-Squares

.. GENERATED FROM PYTHON SOURCE LINES 33-41

.. code-block:: default

    image = get_sample_data('3d-pmri').data
    image = np.linalg.norm(image, axis=0)

    # Obtain K-Space Cartesian Mask (straight line readout along z)
    mask = get_sample_data("2d-poisson-disk-mask").data
    mask = np.repeat(np.expand_dims(mask, axis=-1), image.shape[-1],
                          axis=-1)


.. GENERATED FROM PYTHON SOURCE LINES 42-43

View Input

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: default

    plt.subplot(1, 2, 1)
    plt.imshow(np.abs(image[..., 80]), cmap='gray')
    plt.title("MRI Data")
    plt.subplot(1, 2, 2)
    plt.imshow(mask[..., 80], cmap='gray')
    plt.title("K-space Sampling Mask")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 52-58

Generate the kspace
-------------------

From the 3D Orange volume and the acquisition mask, we retrospectively
undersample the k-space using a cartesian acquisition mask
We then reconstruct the zero order solution as a baseline

.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: default



    # Generate the subsampled kspace
    fourier_op = FFT(mask=mask, shape=image.shape)
    kspace_data = fourier_op.op(image)


.. GENERATED FROM PYTHON SOURCE LINES 65-66

Zero order solution

.. GENERATED FROM PYTHON SOURCE LINES 66-72

.. code-block:: default

    image_rec0 = fourier_op.adj_op(kspace_data)
    base_ssim = ssim(image_rec0, image)
    plt.imshow(np.abs(image_rec0[..., 80]), cmap='gray')
    plt.title('Gridded solution : SSIM = ' + str(np.around(base_ssim, 2)))
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 73-78

FISTA optimization
------------------

We now want to refine the zero order solution using a FISTA optimization.
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 78-95

.. code-block:: default


    # Setup the operators
    linear_op = WaveletN(
        wavelet_name="sym8",
        nb_scales=4,
        dim=3,
        padding_mode="periodization",
    )
    regularizer_op = SparseThreshold(Identity(), 2 * 1e-11, thresh_type="soft")
    # Setup Reconstructor
    reconstructor = SingleChannelReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )

.. GENERATED FROM PYTHON SOURCE LINES 96-97

Start Reconstruction

.. GENERATED FROM PYTHON SOURCE LINES 97-106

.. code-block:: default

    image_rec, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_data,
        optimization_alg='fista',
        num_iterations=200,
    )
    recon_ssim = ssim(image_rec, image)
    plt.imshow(np.abs(image_rec[..., 80]), cmap='gray')
    plt.title('Iterative Reconstruction : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction_3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/cea-cosmic/pysap/gh-pages?urlpath=lab/tree/notebooks/auto_examples/pysap-mri/cartesian_reconstruction_3d.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cartesian_reconstruction_3d.py <cartesian_reconstruction_3d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cartesian_reconstruction_3d.ipynb <cartesian_reconstruction_3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
