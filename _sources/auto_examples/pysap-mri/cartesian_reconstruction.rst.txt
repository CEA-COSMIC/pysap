
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/cartesian_reconstruction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_cartesian_reconstruction.py:


Neuroimaging cartesian reconstruction
=====================================

Author: Chaithya G R

In this tutorial we will reconstruct an MRI image from the sparse kspace
measurements.

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 2D brain slice
and the cartesian acquisition scheme.

.. GENERATED FROM PYTHON SOURCE LINES 18-19

Package import

.. GENERATED FROM PYTHON SOURCE LINES 19-31

.. code-block:: default

    from mri.operators import FFT, WaveletN
    from mri.operators.utils import convert_mask_to_locations
    from mri.reconstructors import SingleChannelReconstructor
    from pysap.data import get_sample_data

    # Third party import
    from modopt.opt.proximity import SparseThreshold
    from modopt.opt.linear import Identity
    from modopt.math.metrics import ssim
    import numpy as np
    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 32-33

Loading input data

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: default

    image = get_sample_data('2d-mri')
    # Obtain K-Space Cartesian Mask
    mask = get_sample_data("cartesian-mri-mask")


.. GENERATED FROM PYTHON SOURCE LINES 38-39

View Input

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default

    plt.subplot(1, 2, 1)
    plt.imshow(np.abs(image), cmap='gray')
    plt.title("MRI Data")
    plt.subplot(1, 2, 2)
    plt.imshow(mask, cmap='gray')
    plt.title("K-space Sampling Mask")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 48-54

Generate the kspace
-------------------

From the 2D brain slice and the acquisition mask, we retrospectively
undersample the k-space using a cartesian acquisition mask
We then reconstruct the zero order solution as a baseline

.. GENERATED FROM PYTHON SOURCE LINES 54-62

.. code-block:: default



    # Get the locations of the kspace samples
    kspace_loc = convert_mask_to_locations(mask.data)
    # Generate the subsampled kspace
    fourier_op = FFT(samples=kspace_loc, shape=image.shape)
    kspace_data = fourier_op.op(image)


.. GENERATED FROM PYTHON SOURCE LINES 63-64

Zero order solution

.. GENERATED FROM PYTHON SOURCE LINES 64-70

.. code-block:: default

    zero_soln = fourier_op.adj_op(kspace_data)
    base_ssim = ssim(zero_soln, image)
    plt.imshow(np.abs(zero_soln), cmap='gray')
    plt.title('Zero Order Solution : SSIM = ' + str(np.around(base_ssim, 2)))
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 71-76

FISTA optimization
------------------

We now want to refine the zero order solution using a FISTA optimization.
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 76-88

.. code-block:: default


    # Setup the operators
    linear_op = WaveletN(wavelet_name="sym8", nb_scales=4)
    regularizer_op = SparseThreshold(Identity(), 2 * 1e-7, thresh_type="soft")
    # Setup Reconstructor
    reconstructor = SingleChannelReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )

.. GENERATED FROM PYTHON SOURCE LINES 89-90

Start Reconstruction

.. GENERATED FROM PYTHON SOURCE LINES 90-98

.. code-block:: default

    image_rec, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_data,
        optimization_alg='fista',
        num_iterations=200,
    )
    recon_ssim = ssim(image_rec, image)
    plt.imshow(np.abs(image_rec), cmap='gray')
    plt.title('Iterative Reconstruction : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/cea-cosmic/pysap/gh-pages?urlpath=lab/tree/notebooks/auto_examples/pysap-mri/cartesian_reconstruction.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cartesian_reconstruction.py <cartesian_reconstruction.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cartesian_reconstruction.ipynb <cartesian_reconstruction.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
