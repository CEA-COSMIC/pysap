
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/CalibrationlessReconstruction_OWL_Cartesian.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_CalibrationlessReconstruction_OWL_Cartesian.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_CalibrationlessReconstruction_OWL_Cartesian.py:


Cartesian Calibrationless Reconstruction using OWL Regularizer
==============================================================

Author: Chaithya G R

In this tutorial we will reconstruct an MRI image from cartesian kspace
measurements.

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 2D parallel MRI
brain slice on 32 channels and the acquisition cartesian scheme.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

Package import

.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. code-block:: default

    from mri.operators import FFT, WaveletN, OWL
    from mri.reconstructors import CalibrationlessReconstructor
    from pysap.data import get_sample_data

    # Third party import
    from modopt.math.metrics import ssim
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Loading input data

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default

    cartesian_ref_image = get_sample_data('2d-pmri').data
    image = np.linalg.norm(cartesian_ref_image, axis=0)
    # Obtain MRI cartesian mask
    mask = get_sample_data("cartesian-mri-mask").data








.. GENERATED FROM PYTHON SOURCE LINES 35-36

View Input

.. GENERATED FROM PYTHON SOURCE LINES 36-44

.. code-block:: default

    plt.subplot(1, 2, 1)
    plt.imshow(np.abs(image), cmap='gray')
    plt.title("MRI Data")
    plt.subplot(1, 2, 2)
    plt.imshow(mask, cmap='gray')
    plt.title("K-space Sampling Mask")
    plt.show()




.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_001.png
   :alt: MRI Data, K-space Sampling Mask
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_001.png, /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_001_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/CalibrationlessReconstruction_OWL_Cartesian.py:42: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 45-51

Generate the kspace
-------------------

From the 2D brain slice and the acquisition mask, we retrospectively
undersample the k-space using a cartesian acquisition mask
We then reconstruct the zero order solution as a baseline

.. GENERATED FROM PYTHON SOURCE LINES 51-57

.. code-block:: default


    # Get the locations of the kspace samples and the associated observations
    fourier_op = FFT(mask=mask, shape=image.shape,
                     n_coils=cartesian_ref_image.shape[0])
    kspace_obs = fourier_op.op(cartesian_ref_image)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

Zero order solution

.. GENERATED FROM PYTHON SOURCE LINES 59-65

.. code-block:: default

    zero_soln = np.linalg.norm(fourier_op.adj_op(kspace_obs), axis=0)
    base_ssim = ssim(zero_soln, image)
    plt.imshow(np.abs(zero_soln), cmap='gray')
    plt.title('Zero Order Solution : SSIM = ' + str(np.around(base_ssim, 2)))
    plt.show()




.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_002.png
   :alt: Zero Order Solution : SSIM = 0.83
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_002.png, /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_002_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/CalibrationlessReconstruction_OWL_Cartesian.py:63: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 66-71

FISTA optimization
------------------

We now want to refine the zero order solution using a FISTA optimization.
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 71-94

.. code-block:: default


    # Setup the operators
    linear_op = WaveletN(
        wavelet_name='sym8',
        nb_scale=4,
        n_coils=cartesian_ref_image.shape[0],
    )
    coeffs = linear_op.op(cartesian_ref_image)
    regularizer_op = OWL(
        alpha=1.05e-8,
        beta=0,
        mode='band_based',
        n_coils=cartesian_ref_image.shape[0],
        bands_shape=linear_op.coeffs_shape,
    )
    # Setup Reconstructor
    reconstructor = CalibrationlessReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
    Lipschitz constant is 1.0999998688697816
    The lipschitz constraint is satisfied




.. GENERATED FROM PYTHON SOURCE LINES 95-96

Run the FISTA reconstruction and view results

.. GENERATED FROM PYTHON SOURCE LINES 96-106

.. code-block:: default

    image_rec, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_obs,
        optimization_alg='fista',
        num_iterations=100,
    )
    image_rec = np.linalg.norm(image_rec, axis=0)
    recon_ssim = ssim(image_rec, image)
    plt.imshow(np.abs(image_rec), cmap='gray')
    plt.title('Iterative Reconstruction : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()



.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_003.png
   :alt: Iterative Reconstruction : SSIM = 0.9
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_003.png, /auto_examples/pysap-mri/images/sphx_glr_CalibrationlessReconstruction_OWL_Cartesian_003_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
     - mu:  [<modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf807ce740>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf687ecb50>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf687ec850>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf687ee560>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf687edde0>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf687ec910>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf687ef910>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf785b8fd0>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf785b9e10>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf785b9b40>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf785ba1a0>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf785b9ed0>, <modopt.opt.proximity.OrderedWeightedL1Norm object at 0x7faf785b9150>]
     - lipschitz constant:  1.0999998688697816
     - data:  (512, 512)
     - wavelet:  <mri.operators.linear.wavelet.WaveletN object at 0x7faf7431ece0> - 4
     - max iterations:  100
     - image variable shape:  (512, 512)
     - alpha variable shape:  (32, 291721)
    ----------------------------------------
    Starting optimization...
      0%|          | 0/100 [00:00<?, ?it/s]      1%|1         | 1/100 [00:03<05:27,  3.31s/it]      2%|2         | 2/100 [00:06<05:23,  3.30s/it]      3%|3         | 3/100 [00:09<05:18,  3.29s/it]      4%|4         | 4/100 [00:13<05:15,  3.29s/it]      5%|5         | 5/100 [00:16<05:11,  3.28s/it]      6%|6         | 6/100 [00:19<05:08,  3.28s/it]      7%|7         | 7/100 [00:23<05:05,  3.29s/it]      8%|8         | 8/100 [00:26<05:02,  3.29s/it]      9%|9         | 9/100 [00:29<05:00,  3.30s/it]     10%|#         | 10/100 [00:32<04:56,  3.30s/it]     11%|#1        | 11/100 [00:36<04:52,  3.28s/it]     12%|#2        | 12/100 [00:39<04:48,  3.28s/it]     13%|#3        | 13/100 [00:42<04:45,  3.28s/it]     14%|#4        | 14/100 [00:46<04:42,  3.29s/it]     15%|#5        | 15/100 [00:49<04:39,  3.29s/it]     16%|#6        | 16/100 [00:52<04:35,  3.28s/it]     17%|#7        | 17/100 [00:55<04:32,  3.28s/it]     18%|#8        | 18/100 [00:59<04:29,  3.28s/it]     19%|#9        | 19/100 [01:02<04:26,  3.29s/it]     20%|##        | 20/100 [01:05<04:23,  3.29s/it]     21%|##1       | 21/100 [01:09<04:20,  3.29s/it]     22%|##2       | 22/100 [01:12<04:16,  3.29s/it]     23%|##3       | 23/100 [01:15<04:13,  3.29s/it]     24%|##4       | 24/100 [01:18<04:09,  3.29s/it]     25%|##5       | 25/100 [01:22<04:06,  3.29s/it]     26%|##6       | 26/100 [01:25<04:03,  3.29s/it]     27%|##7       | 27/100 [01:28<04:00,  3.29s/it]     28%|##8       | 28/100 [01:32<03:57,  3.29s/it]     29%|##9       | 29/100 [01:35<03:53,  3.28s/it]     30%|###       | 30/100 [01:38<03:50,  3.29s/it]     31%|###1      | 31/100 [01:41<03:47,  3.29s/it]     32%|###2      | 32/100 [01:45<03:43,  3.29s/it]     33%|###3      | 33/100 [01:48<03:40,  3.29s/it]     34%|###4      | 34/100 [01:51<03:37,  3.29s/it]     35%|###5      | 35/100 [01:55<03:33,  3.28s/it]     36%|###6      | 36/100 [01:58<03:30,  3.28s/it]     37%|###7      | 37/100 [02:01<03:27,  3.29s/it]     38%|###8      | 38/100 [02:04<03:24,  3.30s/it]     39%|###9      | 39/100 [02:08<03:21,  3.30s/it]     40%|####      | 40/100 [02:11<03:17,  3.30s/it]     41%|####1     | 41/100 [02:14<03:14,  3.30s/it]     42%|####2     | 42/100 [02:18<03:11,  3.29s/it]     43%|####3     | 43/100 [02:21<03:07,  3.29s/it]     44%|####4     | 44/100 [02:24<03:04,  3.30s/it]     45%|####5     | 45/100 [02:28<03:01,  3.30s/it]     46%|####6     | 46/100 [02:31<02:58,  3.30s/it]     47%|####6     | 47/100 [02:34<02:54,  3.30s/it]     48%|####8     | 48/100 [02:37<02:51,  3.29s/it]     49%|####9     | 49/100 [02:41<02:47,  3.29s/it]     50%|#####     | 50/100 [02:44<02:44,  3.30s/it]     51%|#####1    | 51/100 [02:47<02:41,  3.30s/it]     52%|#####2    | 52/100 [02:51<02:38,  3.30s/it]     53%|#####3    | 53/100 [02:54<02:35,  3.30s/it]     54%|#####4    | 54/100 [02:57<02:31,  3.29s/it]     55%|#####5    | 55/100 [03:01<02:28,  3.30s/it]     56%|#####6    | 56/100 [03:04<02:25,  3.30s/it]     57%|#####6    | 57/100 [03:07<02:21,  3.30s/it]     58%|#####8    | 58/100 [03:10<02:18,  3.29s/it]     59%|#####8    | 59/100 [03:14<02:15,  3.29s/it]     60%|######    | 60/100 [03:17<02:11,  3.29s/it]     61%|######1   | 61/100 [03:20<02:08,  3.29s/it]     62%|######2   | 62/100 [03:24<02:05,  3.30s/it]     63%|######3   | 63/100 [03:27<02:02,  3.30s/it]     64%|######4   | 64/100 [03:30<01:58,  3.30s/it]     65%|######5   | 65/100 [03:34<01:55,  3.30s/it]     66%|######6   | 66/100 [03:37<01:51,  3.29s/it]     67%|######7   | 67/100 [03:40<01:48,  3.30s/it]     68%|######8   | 68/100 [03:43<01:45,  3.29s/it]     69%|######9   | 69/100 [03:47<01:42,  3.29s/it]     70%|#######   | 70/100 [03:50<01:38,  3.29s/it]     71%|#######1  | 71/100 [03:53<01:35,  3.28s/it]     72%|#######2  | 72/100 [03:57<01:31,  3.28s/it]     73%|#######3  | 73/100 [04:00<01:28,  3.29s/it]     74%|#######4  | 74/100 [04:03<01:25,  3.30s/it]     75%|#######5  | 75/100 [04:06<01:22,  3.30s/it]     76%|#######6  | 76/100 [04:10<01:19,  3.30s/it]     77%|#######7  | 77/100 [04:13<01:15,  3.30s/it]     78%|#######8  | 78/100 [04:16<01:12,  3.29s/it]     79%|#######9  | 79/100 [04:20<01:09,  3.30s/it]     80%|########  | 80/100 [04:23<01:05,  3.30s/it]     81%|########1 | 81/100 [04:26<01:02,  3.30s/it]     82%|########2 | 82/100 [04:30<00:59,  3.29s/it]     83%|########2 | 83/100 [04:33<00:55,  3.29s/it]     84%|########4 | 84/100 [04:36<00:52,  3.28s/it]     85%|########5 | 85/100 [04:39<00:49,  3.28s/it]     86%|########6 | 86/100 [04:43<00:46,  3.29s/it]     87%|########7 | 87/100 [04:46<00:42,  3.29s/it]     88%|########8 | 88/100 [04:49<00:39,  3.29s/it]     89%|########9 | 89/100 [04:53<00:36,  3.29s/it]     90%|######### | 90/100 [04:56<00:32,  3.28s/it]     91%|#########1| 91/100 [04:59<00:29,  3.29s/it]     92%|#########2| 92/100 [05:02<00:26,  3.30s/it]     93%|#########3| 93/100 [05:06<00:23,  3.30s/it]     94%|#########3| 94/100 [05:09<00:19,  3.29s/it]     95%|#########5| 95/100 [05:12<00:16,  3.29s/it]     96%|#########6| 96/100 [05:16<00:13,  3.29s/it]     97%|#########7| 97/100 [05:19<00:09,  3.29s/it]     98%|#########8| 98/100 [05:22<00:06,  3.29s/it]     99%|#########9| 99/100 [05:25<00:03,  3.30s/it]    100%|##########| 100/100 [05:29<00:00,  3.29s/it]    100%|##########| 100/100 [05:29<00:00,  3.29s/it]
     - final iteration number:  100
     - final log10 cost value:  6.0
     - converged:  False
    Done.
    Execution time:  329.23370477417484  seconds
    ----------------------------------------
    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/CalibrationlessReconstruction_OWL_Cartesian.py:105: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  22.356 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_CalibrationlessReconstruction_OWL_Cartesian.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/cea-cosmic/pysap/gh-pages?urlpath=lab/tree/notebooks/auto_examples/pysap-mri/CalibrationlessReconstruction_OWL_Cartesian.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: CalibrationlessReconstruction_OWL_Cartesian.py <CalibrationlessReconstruction_OWL_Cartesian.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: CalibrationlessReconstruction_OWL_Cartesian.ipynb <CalibrationlessReconstruction_OWL_Cartesian.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
