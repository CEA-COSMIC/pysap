
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/cartesian_reconstruction_auto_threshold.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction_auto_threshold.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_cartesian_reconstruction_auto_threshold.py:


Auto Thresholded cartesian reconstruction
=========================================

Author: Chaithya G R / Pierre-Antoine Comby

In this tutorial we will reconstruct an MRI image from the sparse kspace
measurements.

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 2D brain slice
and the cartesian acquisition scheme.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

Package import

.. GENERATED FROM PYTHON SOURCE LINES 18-50

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np
    from modopt.math.metrics import snr, ssim
    from modopt.opt.linear import Identity
    # Third party import
    from modopt.opt.proximity import SparseThreshold
    from mri.operators import FFT, WaveletN
    from mri.operators.proximity.weighted import AutoWeightedSparseThreshold
    from mri.operators.utils import convert_mask_to_locations
    from mri.reconstructors import SingleChannelReconstructor
    from pysap.data import get_sample_data

    image = get_sample_data('2d-mri')
    print(image.data.min(), image.data.max())
    image = image.data
    image /= np.max(image)
    mask = get_sample_data("cartesian-mri-mask")


    # Get the locations of the kspace samples
    kspace_loc = convert_mask_to_locations(mask.data)
    # Generate the subsampled kspace
    fourier_op = FFT(mask=mask, shape=image.shape)
    kspace_data = fourier_op.op(image)

    # Zero order solution
    image_rec0 = np.abs(fourier_op.adj_op(kspace_data))

    # Calculate SSIM
    base_ssim = ssim(image_rec0, image)
    print(base_ssim)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    9.5823815e-08 2.518473e-05
    0.7228762359967604




.. GENERATED FROM PYTHON SOURCE LINES 51-56

POGM optimization
------------------
We now want to refine the zero order solution using an accelerated Proximal Gradient
Descent algorithm (FISTA or POGM).
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 56-103

.. code-block:: default



    # Setup the operators
    linear_op = WaveletN(wavelet_name="sym8", nb_scales=3)

    # Manual tweak of the regularisation parameter
    regularizer_op = SparseThreshold(Identity(), 2e-3, thresh_type="soft")
    # Setup Reconstructor
    reconstructor = SingleChannelReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )
    # Start Reconstruction
    x_final, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_data,
        optimization_alg='pogm',
        num_iterations=100,
        cost_op_kwargs={"cost_interval":None},
        metric_call_period=1,
        metrics = {
            "snr":{
                "metric": snr,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping":False,
            },
            "ssim":{
                "metric": ssim,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping": False,
            }
        }
    )

    image_rec = np.abs(x_final)
    # image_rec.show()
    # Calculate SSIM
    recon_ssim = ssim(image_rec, image)
    recon_snr= snr(image_rec, image)

    print('The Reconstruction SSIM is : ' + str(recon_ssim))
    print('The Reconstruction SNR is : ' + str(recon_snr))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
    Lipschitz constant is 1.1
    The lipschitz constraint is satisfied
    WARNING: Making input data immutable.
     - mu:  0.002
     - lipschitz constant:  1.1
     - data:  (512, 512)
     - wavelet:  <mri.operators.linear.wavelet.WaveletN object at 0x7f069c740250> - 4
     - max iterations:  100
     - image variable shape:  (1, 512, 512)
    ----------------------------------------
    Starting optimization...
      0%|          | 0/100 [00:00<?, ?it/s]      1%|1         | 1/100 [00:00<00:11,  8.56it/s]      2%|2         | 2/100 [00:00<00:11,  8.39it/s]      3%|3         | 3/100 [00:00<00:11,  8.44it/s]      4%|4         | 4/100 [00:00<00:11,  8.45it/s]      5%|5         | 5/100 [00:00<00:11,  8.46it/s]      6%|6         | 6/100 [00:00<00:11,  8.50it/s]      7%|7         | 7/100 [00:00<00:10,  8.49it/s]      8%|8         | 8/100 [00:00<00:10,  8.49it/s]      9%|9         | 9/100 [00:01<00:10,  8.48it/s]     10%|#         | 10/100 [00:01<00:10,  8.49it/s]     11%|#1        | 11/100 [00:01<00:10,  8.46it/s]     12%|#2        | 12/100 [00:01<00:10,  8.41it/s]     13%|#3        | 13/100 [00:01<00:10,  8.43it/s]     14%|#4        | 14/100 [00:01<00:10,  8.45it/s]     15%|#5        | 15/100 [00:01<00:10,  8.45it/s]     16%|#6        | 16/100 [00:01<00:09,  8.46it/s]     17%|#7        | 17/100 [00:02<00:09,  8.43it/s]     18%|#8        | 18/100 [00:02<00:09,  8.45it/s]     19%|#9        | 19/100 [00:02<00:09,  8.43it/s]     20%|##        | 20/100 [00:02<00:09,  8.45it/s]     21%|##1       | 21/100 [00:02<00:09,  8.45it/s]     22%|##2       | 22/100 [00:02<00:09,  8.44it/s]     23%|##3       | 23/100 [00:02<00:09,  8.47it/s]     24%|##4       | 24/100 [00:02<00:08,  8.48it/s]     25%|##5       | 25/100 [00:02<00:08,  8.45it/s]     26%|##6       | 26/100 [00:03<00:08,  8.48it/s]     27%|##7       | 27/100 [00:03<00:08,  8.50it/s]     28%|##8       | 28/100 [00:03<00:08,  8.51it/s]     29%|##9       | 29/100 [00:03<00:08,  8.49it/s]     30%|###       | 30/100 [00:03<00:08,  8.51it/s]     31%|###1      | 31/100 [00:03<00:08,  8.44it/s]     32%|###2      | 32/100 [00:03<00:08,  8.47it/s]     33%|###3      | 33/100 [00:03<00:07,  8.46it/s]     34%|###4      | 34/100 [00:04<00:07,  8.47it/s]     35%|###5      | 35/100 [00:04<00:07,  8.47it/s]     36%|###6      | 36/100 [00:04<00:07,  8.48it/s]     37%|###7      | 37/100 [00:04<00:07,  8.50it/s]     38%|###8      | 38/100 [00:04<00:07,  8.52it/s]     39%|###9      | 39/100 [00:04<00:07,  8.52it/s]     40%|####      | 40/100 [00:04<00:07,  8.57it/s]     41%|####1     | 41/100 [00:04<00:06,  8.54it/s]     42%|####2     | 42/100 [00:04<00:06,  8.53it/s]     43%|####3     | 43/100 [00:05<00:06,  8.51it/s]     44%|####4     | 44/100 [00:05<00:06,  8.44it/s]     45%|####5     | 45/100 [00:05<00:06,  8.39it/s]     46%|####6     | 46/100 [00:05<00:06,  8.38it/s]     47%|####6     | 47/100 [00:05<00:06,  8.42it/s]     48%|####8     | 48/100 [00:05<00:06,  8.39it/s]     49%|####9     | 49/100 [00:05<00:06,  8.43it/s]     50%|#####     | 50/100 [00:05<00:05,  8.43it/s]     51%|#####1    | 51/100 [00:06<00:05,  8.48it/s]     52%|#####2    | 52/100 [00:06<00:05,  8.46it/s]     53%|#####3    | 53/100 [00:06<00:05,  8.46it/s]     54%|#####4    | 54/100 [00:06<00:05,  8.47it/s]     55%|#####5    | 55/100 [00:06<00:05,  8.46it/s]     56%|#####6    | 56/100 [00:06<00:05,  8.46it/s]     57%|#####6    | 57/100 [00:06<00:05,  8.48it/s]     58%|#####8    | 58/100 [00:06<00:04,  8.46it/s]     59%|#####8    | 59/100 [00:06<00:04,  8.46it/s]     60%|######    | 60/100 [00:07<00:04,  8.45it/s]     61%|######1   | 61/100 [00:07<00:04,  8.46it/s]     62%|######2   | 62/100 [00:07<00:04,  8.48it/s]     63%|######3   | 63/100 [00:07<00:04,  8.42it/s]     64%|######4   | 64/100 [00:07<00:04,  8.45it/s]     65%|######5   | 65/100 [00:07<00:04,  8.44it/s]     66%|######6   | 66/100 [00:07<00:04,  8.44it/s]     67%|######7   | 67/100 [00:07<00:03,  8.45it/s]     68%|######8   | 68/100 [00:08<00:03,  8.45it/s]     69%|######9   | 69/100 [00:08<00:03,  8.46it/s]     70%|#######   | 70/100 [00:08<00:03,  8.50it/s]     71%|#######1  | 71/100 [00:08<00:03,  8.52it/s]     72%|#######2  | 72/100 [00:08<00:03,  8.50it/s]     73%|#######3  | 73/100 [00:08<00:03,  8.49it/s]     74%|#######4  | 74/100 [00:08<00:03,  8.48it/s]     75%|#######5  | 75/100 [00:08<00:02,  8.44it/s]     76%|#######6  | 76/100 [00:08<00:02,  8.44it/s]     77%|#######7  | 77/100 [00:09<00:02,  8.42it/s]     78%|#######8  | 78/100 [00:09<00:02,  8.38it/s]     79%|#######9  | 79/100 [00:09<00:02,  8.38it/s]     80%|########  | 80/100 [00:09<00:02,  8.37it/s]     81%|########1 | 81/100 [00:09<00:02,  8.41it/s]     82%|########2 | 82/100 [00:09<00:02,  8.45it/s]     83%|########2 | 83/100 [00:09<00:02,  8.47it/s]     84%|########4 | 84/100 [00:09<00:01,  8.46it/s]     85%|########5 | 85/100 [00:10<00:01,  8.46it/s]     86%|########6 | 86/100 [00:10<00:01,  8.46it/s]     87%|########7 | 87/100 [00:10<00:01,  8.43it/s]     88%|########8 | 88/100 [00:10<00:01,  8.40it/s]     89%|########9 | 89/100 [00:10<00:01,  8.37it/s]     90%|######### | 90/100 [00:10<00:01,  8.38it/s]     91%|#########1| 91/100 [00:10<00:01,  8.40it/s]     92%|#########2| 92/100 [00:10<00:00,  8.40it/s]     93%|#########3| 93/100 [00:10<00:00,  8.41it/s]     94%|#########3| 94/100 [00:11<00:00,  8.39it/s]     95%|#########5| 95/100 [00:11<00:00,  8.40it/s]     96%|#########6| 96/100 [00:11<00:00,  8.40it/s]     97%|#########7| 97/100 [00:11<00:00,  8.43it/s]     98%|#########8| 98/100 [00:11<00:00,  8.48it/s]     99%|#########9| 99/100 [00:11<00:00,  8.50it/s]    100%|##########| 100/100 [00:11<00:00,  8.50it/s]    100%|##########| 100/100 [00:11<00:00,  8.46it/s]
     - final iteration number:  100
     - final log10 cost value:  6.0
     - converged:  False
    Done.
    Execution time:  11.827647201251239  seconds
    ----------------------------------------
    The Reconstruction SSIM is : 0.8597496784357197
    The Reconstruction SNR is : 15.947746555163501




.. GENERATED FROM PYTHON SOURCE LINES 104-106

Threshold estimation using SURE 
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 106-200

.. code-block:: default


    _w = None

    def static_weight(w, idx):
        print(np.unique(w))
        return w

    # Setup the operators
    linear_op = WaveletN(wavelet_name="sym8", nb_scale=3,padding_mode="periodization")
    coeffs = linear_op.op(image_rec0)
    print(linear_op.coeffs_shape)

    # Here we don't manually setup the regularisation weights, but use statistics on the wavelet details coefficients

    regularizer_op = AutoWeightedSparseThreshold(
        linear_op.coeffs_shape, linear=Identity(),
        update_period=0, # the weight is updated only once.
        sigma_range="global",
        thresh_range="global",
        threshold_estimation="sure",
        thresh_type="soft",
    )
    # Setup Reconstructor
    reconstructor = SingleChannelReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )
    # Start Reconstruction
    x_final, costs, metrics2 = reconstructor.reconstruct(
        kspace_data=kspace_data,
        optimization_alg='pogm',
        num_iterations=100,
        metric_call_period=1,
        cost_op_kwargs={"cost_interval":None},
        metrics = {
             "snr":{
                "metric": snr,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping":False,
            },
            "ssim":{
                "metric": ssim,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping": False,
            },
            "cost_grad":{
                "metric": lambda x: reconstructor.gradient_op.cost(linear_op.op(x)),
                "mapping": {"x_new":"x"},
                "cst_kwargs": {},
                "early_stopping": False,
            },
            "cost_prox":{
                "metric": lambda x: reconstructor.prox_op.cost(linear_op.op(x)),
                "mapping": {"x_new":"x"},
                "cst_kwargs": {},
                "early_stopping": False,
            }
        }
    )
    image_rec2 = np.abs(x_final)
    # image_rec.show()
    # Calculate SSIM
    recon_ssim2 = ssim(image_rec2, image)
    recon_snr2 = snr(image_rec2, image)

    print('The Reconstruction SSIM is : ' + str(recon_ssim2))
    print('The Reconstruction SNR is : ' + str(recon_snr2))

    plt.subplot(121)
    plt.plot(metrics["snr"]["time"], metrics["snr"]["values"], label="pogm classic")
    plt.plot(metrics2["snr"]["time"], metrics2["snr"]["values"], label="pogm sure global")
    plt.ylabel("snr")
    plt.xlabel("time")
    plt.legend()
    plt.subplot(122)
    plt.plot(metrics["ssim"]["time"], metrics["ssim"]["values"])
    plt.plot(metrics2["ssim"]["time"], metrics2["ssim"]["values"])
    plt.ylabel("ssim")
    plt.xlabel("time")
    plt.figure()
    plt.subplot(121)
    plt.plot(metrics["snr"]["index"], metrics["snr"]["values"])
    plt.plot(metrics2["snr"]["index"], metrics2["snr"]["values"])
    plt.ylabel("snr")
    plt.subplot(122)
    plt.plot(metrics["ssim"]["index"], metrics["ssim"]["values"])
    plt.plot(metrics2["ssim"]["index"], metrics2["ssim"]["values"])
    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_001.png
         :alt: cartesian reconstruction auto threshold
         :srcset: /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_001.png, /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_001_2_0x.png 2.0x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_002.png
         :alt: cartesian reconstruction auto threshold
         :srcset: /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_002.png, /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_002_2_0x.png 2.0x
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [(64, 64), (64, 64), (64, 64), (64, 64), (128, 128), (128, 128), (128, 128), (256, 256), (256, 256), (256, 256)]
    WARNING: Making input data immutable.
    Lipschitz constant is 1.0999998688697816
    The lipschitz constraint is satisfied
     - mu:  [0. 0. 0. ... 0. 0. 0.]
     - lipschitz constant:  1.0999998688697816
     - data:  (512, 512)
     - wavelet:  <mri.operators.linear.wavelet.WaveletN object at 0x7f052cb64fa0> - 3
     - max iterations:  100
     - image variable shape:  (1, 512, 512)
    ----------------------------------------
    Starting optimization...
      0%|          | 0/100 [00:00<?, ?it/s]      1%|1         | 1/100 [00:00<00:17,  5.58it/s]      2%|2         | 2/100 [00:00<00:17,  5.64it/s]      3%|3         | 3/100 [00:00<00:17,  5.64it/s]      4%|4         | 4/100 [00:00<00:17,  5.65it/s]      5%|5         | 5/100 [00:00<00:16,  5.63it/s]      6%|6         | 6/100 [00:01<00:16,  5.61it/s]      7%|7         | 7/100 [00:01<00:16,  5.63it/s]      8%|8         | 8/100 [00:01<00:16,  5.64it/s]      9%|9         | 9/100 [00:01<00:16,  5.66it/s]     10%|#         | 10/100 [00:01<00:15,  5.64it/s]     11%|#1        | 11/100 [00:01<00:15,  5.64it/s]     12%|#2        | 12/100 [00:02<00:15,  5.65it/s]     13%|#3        | 13/100 [00:02<00:15,  5.63it/s]     14%|#4        | 14/100 [00:02<00:15,  5.63it/s]     15%|#5        | 15/100 [00:02<00:15,  5.65it/s]     16%|#6        | 16/100 [00:02<00:14,  5.65it/s]     17%|#7        | 17/100 [00:03<00:14,  5.66it/s]     18%|#8        | 18/100 [00:03<00:14,  5.65it/s]     19%|#9        | 19/100 [00:03<00:14,  5.67it/s]     20%|##        | 20/100 [00:03<00:14,  5.65it/s]     21%|##1       | 21/100 [00:03<00:13,  5.68it/s]     22%|##2       | 22/100 [00:03<00:13,  5.67it/s]     23%|##3       | 23/100 [00:04<00:13,  5.65it/s]     24%|##4       | 24/100 [00:04<00:13,  5.65it/s]     25%|##5       | 25/100 [00:04<00:13,  5.65it/s]     26%|##6       | 26/100 [00:04<00:13,  5.65it/s]     27%|##7       | 27/100 [00:04<00:13,  5.61it/s]     28%|##8       | 28/100 [00:04<00:12,  5.62it/s]     29%|##9       | 29/100 [00:05<00:12,  5.63it/s]     30%|###       | 30/100 [00:05<00:12,  5.60it/s]     31%|###1      | 31/100 [00:05<00:12,  5.62it/s]     32%|###2      | 32/100 [00:05<00:12,  5.63it/s]     33%|###3      | 33/100 [00:05<00:11,  5.62it/s]     34%|###4      | 34/100 [00:06<00:11,  5.64it/s]     35%|###5      | 35/100 [00:06<00:11,  5.64it/s]     36%|###6      | 36/100 [00:06<00:11,  5.67it/s]     37%|###7      | 37/100 [00:06<00:11,  5.65it/s]     38%|###8      | 38/100 [00:06<00:10,  5.66it/s]     39%|###9      | 39/100 [00:06<00:10,  5.65it/s]     40%|####      | 40/100 [00:07<00:10,  5.61it/s]     41%|####1     | 41/100 [00:07<00:10,  5.61it/s]     42%|####2     | 42/100 [00:07<00:10,  5.63it/s]     43%|####3     | 43/100 [00:07<00:10,  5.63it/s]     44%|####4     | 44/100 [00:07<00:09,  5.63it/s]     45%|####5     | 45/100 [00:07<00:09,  5.65it/s]     46%|####6     | 46/100 [00:08<00:09,  5.66it/s]     47%|####6     | 47/100 [00:08<00:09,  5.67it/s]     48%|####8     | 48/100 [00:08<00:09,  5.66it/s]     49%|####9     | 49/100 [00:08<00:08,  5.67it/s]     50%|#####     | 50/100 [00:08<00:08,  5.64it/s]     51%|#####1    | 51/100 [00:09<00:08,  5.65it/s]     52%|#####2    | 52/100 [00:09<00:08,  5.65it/s]     53%|#####3    | 53/100 [00:09<00:08,  5.65it/s]     54%|#####4    | 54/100 [00:09<00:08,  5.66it/s]     55%|#####5    | 55/100 [00:09<00:07,  5.65it/s]     56%|#####6    | 56/100 [00:09<00:07,  5.65it/s]     57%|#####6    | 57/100 [00:10<00:07,  5.64it/s]     58%|#####8    | 58/100 [00:10<00:07,  5.63it/s]     59%|#####8    | 59/100 [00:10<00:07,  5.63it/s]     60%|######    | 60/100 [00:10<00:07,  5.65it/s]     61%|######1   | 61/100 [00:10<00:06,  5.65it/s]     62%|######2   | 62/100 [00:10<00:06,  5.64it/s]     63%|######3   | 63/100 [00:11<00:06,  5.65it/s]     64%|######4   | 64/100 [00:11<00:06,  5.66it/s]     65%|######5   | 65/100 [00:11<00:06,  5.67it/s]     66%|######6   | 66/100 [00:11<00:05,  5.68it/s]     67%|######7   | 67/100 [00:11<00:05,  5.66it/s]     68%|######8   | 68/100 [00:12<00:05,  5.65it/s]     69%|######9   | 69/100 [00:12<00:05,  5.64it/s]     70%|#######   | 70/100 [00:12<00:05,  5.65it/s]     71%|#######1  | 71/100 [00:12<00:05,  5.65it/s]     72%|#######2  | 72/100 [00:12<00:04,  5.65it/s]     73%|#######3  | 73/100 [00:12<00:04,  5.65it/s]     74%|#######4  | 74/100 [00:13<00:04,  5.64it/s]     75%|#######5  | 75/100 [00:13<00:04,  5.65it/s]     76%|#######6  | 76/100 [00:13<00:04,  5.64it/s]     77%|#######7  | 77/100 [00:13<00:04,  5.64it/s]     78%|#######8  | 78/100 [00:13<00:03,  5.65it/s]     79%|#######9  | 79/100 [00:13<00:03,  5.66it/s]     80%|########  | 80/100 [00:14<00:03,  5.65it/s]     81%|########1 | 81/100 [00:14<00:03,  5.66it/s]     82%|########2 | 82/100 [00:14<00:03,  5.64it/s]     83%|########2 | 83/100 [00:14<00:03,  5.65it/s]     84%|########4 | 84/100 [00:14<00:02,  5.65it/s]     85%|########5 | 85/100 [00:15<00:02,  5.65it/s]     86%|########6 | 86/100 [00:15<00:02,  5.66it/s]     87%|########7 | 87/100 [00:15<00:02,  5.64it/s]     88%|########8 | 88/100 [00:15<00:02,  5.65it/s]     89%|########9 | 89/100 [00:15<00:01,  5.65it/s]     90%|######### | 90/100 [00:15<00:01,  5.63it/s]     91%|#########1| 91/100 [00:16<00:01,  5.65it/s]     92%|#########2| 92/100 [00:16<00:01,  5.64it/s]     93%|#########3| 93/100 [00:16<00:01,  5.64it/s]     94%|#########3| 94/100 [00:16<00:01,  5.66it/s]     95%|#########5| 95/100 [00:16<00:00,  5.64it/s]     96%|#########6| 96/100 [00:17<00:00,  5.66it/s]     97%|#########7| 97/100 [00:17<00:00,  5.65it/s]     98%|#########8| 98/100 [00:17<00:00,  5.65it/s]     99%|#########9| 99/100 [00:17<00:00,  5.66it/s]    100%|##########| 100/100 [00:17<00:00,  5.66it/s]    100%|##########| 100/100 [00:17<00:00,  5.65it/s]
     - final iteration number:  100
     - final log10 cost value:  6.0
     - converged:  False
    Done.
    Execution time:  17.71190463239327  seconds
    ----------------------------------------
    The Reconstruction SSIM is : 0.8140170067389435
    The Reconstruction SNR is : 14.087682208695703
    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/cartesian_reconstruction_auto_threshold.py:198: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 201-204

Qualitative results
-------------------


.. GENERATED FROM PYTHON SOURCE LINES 204-220

.. code-block:: default

    def my_imshow(ax, img, title):
        ax.imshow(img, cmap="gray")
        ax.set_title(title)
        ax.axis("off")
            


    fig, axs = plt.subplots(2,2)

    my_imshow(axs[0,0], image, "Ground Truth")
    my_imshow(axs[0,1], abs(image_rec0), f"Zero Order \n SSIM={base_ssim:.4f}")
    my_imshow(axs[1,0], abs(image_rec), f"Fista Classic \n SSIM={recon_ssim:.4f}")
    my_imshow(axs[1,1], abs(image_rec2), f"Fista Sure \n SSIM={recon_ssim2:.4f}")

    fig.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_003.png
   :alt: Ground Truth, Zero Order   SSIM=0.7229, Fista Classic   SSIM=0.8597, Fista Sure   SSIM=0.8140
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_003.png, /auto_examples/pysap-mri/images/sphx_glr_cartesian_reconstruction_auto_threshold_003_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/cartesian_reconstruction_auto_threshold.py:219: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  33.478 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction_auto_threshold.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/cea-cosmic/pysap/gh-pages?urlpath=lab/tree/notebooks/auto_examples/pysap-mri/cartesian_reconstruction_auto_threshold.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cartesian_reconstruction_auto_threshold.py <cartesian_reconstruction_auto_threshold.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cartesian_reconstruction_auto_threshold.ipynb <cartesian_reconstruction_auto_threshold.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
