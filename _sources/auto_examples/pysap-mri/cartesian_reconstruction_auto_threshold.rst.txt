
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/cartesian_reconstruction_auto_threshold.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction_auto_threshold.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_cartesian_reconstruction_auto_threshold.py:


Auto Thresholded cartesian reconstruction
=========================================

Author: Chaithya G R / Pierre-Antoine Comby

In this tutorial we will reconstruct an MRI image from the sparse kspace
measurements.

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 2D brain slice
and the cartesian acquisition scheme.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

Package import

.. GENERATED FROM PYTHON SOURCE LINES 18-50

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np
    from modopt.math.metrics import snr, ssim
    from modopt.opt.linear import Identity
    # Third party import
    from modopt.opt.proximity import SparseThreshold
    from mri.operators import FFT, WaveletN
    from mri.operators.proximity.weighted import AutoWeightedSparseThreshold
    from mri.operators.utils import convert_mask_to_locations
    from mri.reconstructors import SingleChannelReconstructor
    from pysap.data import get_sample_data

    image = get_sample_data('2d-mri')
    print(image.data.min(), image.data.max())
    image = image.data
    image /= np.max(image)
    mask = get_sample_data("cartesian-mri-mask")


    # Get the locations of the kspace samples
    kspace_loc = convert_mask_to_locations(mask.data)
    # Generate the subsampled kspace
    fourier_op = FFT(mask=mask, shape=image.shape)
    kspace_data = fourier_op.op(image)

    # Zero order solution
    image_rec0 = np.abs(fourier_op.adj_op(kspace_data))

    # Calculate SSIM
    base_ssim = ssim(image_rec0, image)
    print(base_ssim)


.. GENERATED FROM PYTHON SOURCE LINES 51-56

POGM optimization
------------------
We now want to refine the zero order solution using an accelerated Proximal Gradient
Descent algorithm (FISTA or POGM).
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 56-103

.. code-block:: default



    # Setup the operators
    linear_op = WaveletN(wavelet_name="sym8", nb_scales=3)

    # Manual tweak of the regularisation parameter
    regularizer_op = SparseThreshold(Identity(), 2e-3, thresh_type="soft")
    # Setup Reconstructor
    reconstructor = SingleChannelReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )
    # Start Reconstruction
    x_final, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_data,
        optimization_alg='pogm',
        num_iterations=100,
        cost_op_kwargs={"cost_interval":None},
        metric_call_period=1,
        metrics = {
            "snr":{
                "metric": snr,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping":False,
            },
            "ssim":{
                "metric": ssim,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping": False,
            }
        }
    )

    image_rec = np.abs(x_final)
    # image_rec.show()
    # Calculate SSIM
    recon_ssim = ssim(image_rec, image)
    recon_snr= snr(image_rec, image)

    print('The Reconstruction SSIM is : ' + str(recon_ssim))
    print('The Reconstruction SNR is : ' + str(recon_snr))


.. GENERATED FROM PYTHON SOURCE LINES 104-106

Threshold estimation using SURE 
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 106-200

.. code-block:: default


    _w = None

    def static_weight(w, idx):
        print(np.unique(w))
        return w

    # Setup the operators
    linear_op = WaveletN(wavelet_name="sym8", nb_scale=3,padding_mode="periodization")
    coeffs = linear_op.op(image_rec0)
    print(linear_op.coeffs_shape)

    # Here we don't manually setup the regularisation weights, but use statistics on the wavelet details coefficients

    regularizer_op = AutoWeightedSparseThreshold(
        linear_op.coeffs_shape, linear=Identity(),
        update_period=0, # the weight is updated only once.
        sigma_range="global",
        thresh_range="global",
        threshold_estimation="sure",
        thresh_type="soft",
    )
    # Setup Reconstructor
    reconstructor = SingleChannelReconstructor(
        fourier_op=fourier_op,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )
    # Start Reconstruction
    x_final, costs, metrics2 = reconstructor.reconstruct(
        kspace_data=kspace_data,
        optimization_alg='pogm',
        num_iterations=100,
        metric_call_period=1,
        cost_op_kwargs={"cost_interval":None},
        metrics = {
             "snr":{
                "metric": snr,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping":False,
            },
            "ssim":{
                "metric": ssim,
                "mapping": {"x_new":"test"},
                "cst_kwargs": {"ref": image},
                "early_stopping": False,
            },
            "cost_grad":{
                "metric": lambda x: reconstructor.gradient_op.cost(linear_op.op(x)),
                "mapping": {"x_new":"x"},
                "cst_kwargs": {},
                "early_stopping": False,
            },
            "cost_prox":{
                "metric": lambda x: reconstructor.prox_op.cost(linear_op.op(x)),
                "mapping": {"x_new":"x"},
                "cst_kwargs": {},
                "early_stopping": False,
            }
        }
    )
    image_rec2 = np.abs(x_final)
    # image_rec.show()
    # Calculate SSIM
    recon_ssim2 = ssim(image_rec2, image)
    recon_snr2 = snr(image_rec2, image)

    print('The Reconstruction SSIM is : ' + str(recon_ssim2))
    print('The Reconstruction SNR is : ' + str(recon_snr2))

    plt.subplot(121)
    plt.plot(metrics["snr"]["time"], metrics["snr"]["values"], label="pogm classic")
    plt.plot(metrics2["snr"]["time"], metrics2["snr"]["values"], label="pogm sure global")
    plt.ylabel("snr")
    plt.xlabel("time")
    plt.legend()
    plt.subplot(122)
    plt.plot(metrics["ssim"]["time"], metrics["ssim"]["values"])
    plt.plot(metrics2["ssim"]["time"], metrics2["ssim"]["values"])
    plt.ylabel("ssim")
    plt.xlabel("time")
    plt.figure()
    plt.subplot(121)
    plt.plot(metrics["snr"]["index"], metrics["snr"]["values"])
    plt.plot(metrics2["snr"]["index"], metrics2["snr"]["values"])
    plt.ylabel("snr")
    plt.subplot(122)
    plt.plot(metrics["ssim"]["index"], metrics["ssim"]["values"])
    plt.plot(metrics2["ssim"]["index"], metrics2["ssim"]["values"])
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 201-204

Qualitative results
-------------------


.. GENERATED FROM PYTHON SOURCE LINES 204-220

.. code-block:: default

    def my_imshow(ax, img, title):
        ax.imshow(img, cmap="gray")
        ax.set_title(title)
        ax.axis("off")
            


    fig, axs = plt.subplots(2,2)

    my_imshow(axs[0,0], image, "Ground Truth")
    my_imshow(axs[0,1], abs(image_rec0), f"Zero Order \n SSIM={base_ssim:.4f}")
    my_imshow(axs[1,0], abs(image_rec), f"Fista Classic \n SSIM={recon_ssim:.4f}")
    my_imshow(axs[1,1], abs(image_rec2), f"Fista Sure \n SSIM={recon_ssim2:.4f}")

    fig.tight_layout()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_cartesian_reconstruction_auto_threshold.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/cea-cosmic/pysap/gh-pages?urlpath=lab/tree/notebooks/auto_examples/pysap-mri/cartesian_reconstruction_auto_threshold.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cartesian_reconstruction_auto_threshold.py <cartesian_reconstruction_auto_threshold.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cartesian_reconstruction_auto_threshold.ipynb <cartesian_reconstruction_auto_threshold.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
