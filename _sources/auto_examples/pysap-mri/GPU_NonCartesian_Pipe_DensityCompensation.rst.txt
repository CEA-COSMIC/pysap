
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/GPU_NonCartesian_Pipe_DensityCompensation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_GPU_NonCartesian_Pipe_DensityCompensation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_GPU_NonCartesian_Pipe_DensityCompensation.py:


GPU Density Compensation Reconstruction Comparison
===================================================

Author: Chaithya G R

In this tutorial we will reconstruct an MR Image directly with density
compensation

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 2D brain slice
and the radial acquisition scheme (non-cartesian).

.. GENERATED FROM PYTHON SOURCE LINES 18-19

Package import

.. GENERATED FROM PYTHON SOURCE LINES 19-29

.. code-block:: default

    from mri.operators import NonCartesianFFT
    from mri.operators.fourier.utils import estimate_density_compensation, \
        convert_locations_to_mask, gridded_inverse_fourier_transform_nd
    from pysap.data import get_sample_data

    # Third party import
    from modopt.math.metrics import ssim
    import numpy as np
    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 30-31

Loading input data

.. GENERATED FROM PYTHON SOURCE LINES 31-37

.. code-block:: default

    image = get_sample_data('2d-mri').data.astype(np.complex64)

    # Obtain MRI non-cartesian mask and estimate the density compensation
    kspace_loc = get_sample_data("mri-radial-samples").data
    density_comp = estimate_density_compensation(kspace_loc, image.shape, 'pipe', backend='gpunufft')
    density_comp2 = estimate_density_compensation(kspace_loc, image.shape, 'cell_count')

.. GENERATED FROM PYTHON SOURCE LINES 38-39

View Input

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default

    plt.subplot(1, 2, 1)
    plt.imshow(np.abs(image), cmap='gray')
    plt.title("MRI Data")
    plt.subplot(1, 2, 2)
    plt.imshow(convert_locations_to_mask(kspace_loc, image.shape), cmap='gray')
    plt.title("K-space Sampling Mask")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 48-54

Generate the kspace
-------------------

From the 2D brain slice and the acquisition mask, we retrospectively
undersample the k-space using a radial acquisition mask
We then reconstruct using adjoint with and without density compensation

.. GENERATED FROM PYTHON SOURCE LINES 54-74

.. code-block:: default


    # Get the locations of the kspace samples and the associated observations
    fourier_op = NonCartesianFFT(
        samples=kspace_loc,
        shape=image.shape,
    )
    fourier_op_density_comp = NonCartesianFFT(
        samples=kspace_loc,
        shape=image.shape,
        density_comp=density_comp
    )
    fourier_op_density_comp2 = NonCartesianFFT(
        samples=kspace_loc,
        shape=image.shape,
        density_comp=density_comp2
    )
    # Get the kspace data retrospectively. Note that this can be done with
    # `fourier_op_density_comp` as the forward operator is the same
    kspace_obs = fourier_op.op(image)


.. GENERATED FROM PYTHON SOURCE LINES 75-76

Gridded solution

.. GENERATED FROM PYTHON SOURCE LINES 76-84

.. code-block:: default

    grid_space = np.linspace(-0.5, 0.5, num=image.shape[0])
    grid2D = np.meshgrid(grid_space, grid_space)
    grid_soln = gridded_inverse_fourier_transform_nd(kspace_loc, kspace_obs,
                                                     tuple(grid2D), 'linear')
    base_ssim = ssim(grid_soln, image, mask=np.abs(image)>np.mean(np.abs(image)))
    plt.imshow(np.abs(grid_soln), cmap='gray')
    plt.title('Gridded solution : SSIM = ' + str(np.around(base_ssim, 2)))
    plt.show()

.. GENERATED FROM PYTHON SOURCE LINES 85-87

Simple adjoint
This preconditions k-space giving a result closer to inverse

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default

    image_rec = fourier_op.adj_op(kspace_obs)
    recon_ssim = ssim(image_rec, image, mask=np.abs(image)>np.mean(np.abs(image)))
    plt.imshow(np.abs(image_rec), cmap='gray')
    plt.title('Simple NUFFT Adjoint : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 94-96

Density Compensation adjoint (from Pipe):
This preconditions k-space giving a result closer to inverse

.. GENERATED FROM PYTHON SOURCE LINES 96-102

.. code-block:: default

    image_rec = fourier_op_density_comp.adj_op(kspace_obs)
    recon_ssim = ssim(image_rec, image, mask=np.abs(image)>np.mean(np.abs(image)))
    plt.imshow(np.abs(image_rec), cmap='gray')
    plt.title('Density Compensated Adjoint (Pipe): SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 103-105

Density Compensation adjoint (from cell_count):
This preconditions k-space giving a result closer to inverse

.. GENERATED FROM PYTHON SOURCE LINES 105-109

.. code-block:: default

    image_rec = fourier_op_density_comp.adj_op(kspace_obs)
    recon_ssim = ssim(image_rec, image, mask=np.abs(image)>np.mean(np.abs(image)))
    plt.imshow(np.abs(image_rec), cmap='gray')
    plt.title('Density Compensated Adjoint (cell_count): SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_GPU_NonCartesian_Pipe_DensityCompensation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/cea-cosmic/pysap/gh-pages?urlpath=lab/tree/notebooks/auto_examples/pysap-mri/GPU_NonCartesian_Pipe_DensityCompensation.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: GPU_NonCartesian_Pipe_DensityCompensation.py <GPU_NonCartesian_Pipe_DensityCompensation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: GPU_NonCartesian_Pipe_DensityCompensation.ipynb <GPU_NonCartesian_Pipe_DensityCompensation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
