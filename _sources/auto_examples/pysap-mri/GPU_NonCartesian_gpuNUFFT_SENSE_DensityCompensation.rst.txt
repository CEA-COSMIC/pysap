
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pysap-mri/GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pysap-mri_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pysap-mri_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py:


GPU non-cartesian reconstruction with SENSE
===========================================

Author: Chaithya G R

In this tutorial we will reconstruct an MR Image directly with density
compensation and SENSE from gpuNUFFT

Import neuroimaging data
------------------------

We use the toy datasets available in pysap, more specifically a 3D orange data
and the radial acquisition scheme (non-cartesian).

.. GENERATED FROM PYTHON SOURCE LINES 18-19

Package import

.. GENERATED FROM PYTHON SOURCE LINES 19-33

.. code-block:: default

    from mri.operators import NonCartesianFFT, WaveletN
    from mri.operators.utils import normalize_frequency_locations
    from mri.operators.fourier.utils import estimate_density_compensation
    from mri.reconstructors import SelfCalibrationReconstructor
    from mri.reconstructors.utils.extract_sensitivity_maps import get_Smaps
    from pysap.data import get_sample_data

    # Third party import
    from modopt.math.metrics import ssim
    from modopt.opt.linear import Identity
    from modopt.opt.proximity import SparseThreshold
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Loading input data

.. GENERATED FROM PYTHON SOURCE LINES 35-43

.. code-block:: default

    image = get_sample_data('3d-pmri').data.astype(np.complex64)
    cartesian = np.linalg.norm(image, axis=0)

    # Obtain MRI non-cartesian mask and estimate the density compensation
    radial_mask = get_sample_data("mri-radial-3d-samples")
    kspace_loc = normalize_frequency_locations(radial_mask.data)
    density_comp = estimate_density_compensation(kspace_loc, cartesian.shape, 'pipe', backend='gpunufft')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/mri/operators/fourier/utils/processing.py:101: UserWarning: Frequencies outside the 0.5 limit.
      warnings.warn("Frequencies outside the 0.5 limit.")




.. GENERATED FROM PYTHON SOURCE LINES 44-45

View Input

.. GENERATED FROM PYTHON SOURCE LINES 45-53

.. code-block:: default

    plt.subplot(1, 2, 1)
    plt.imshow(cartesian[..., 80], cmap='gray')
    plt.title("MRI Data")
    ax = plt.subplot(1, 2, 2, projection='3d')
    ax.scatter(*kspace_loc[::500].T, s=0.1, alpha=0.5)
    plt.title("K-space Sampling Mask")
    plt.show()




.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_001.png
   :alt: MRI Data, K-space Sampling Mask
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_001.png, /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_001_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py:51: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 54-60

Generate the kspace
-------------------

From the 3D orange slice and 3D radial acquisition mask, we retrospectively
undersample the k-space
We then reconstruct using adjoint with and without density compensation

.. GENERATED FROM PYTHON SOURCE LINES 60-69

.. code-block:: default


    # Get the locations of the kspace samples and the associated observations
    fourier_op = NonCartesianFFT(
        samples=kspace_loc,
        shape=cartesian.shape,
        n_coils=image.shape[0],
        implementation='gpuNUFFT',
    )
    kspace_obs = fourier_op.op(image)







.. GENERATED FROM PYTHON SOURCE LINES 70-71

Obtrain the Sensitivity Maps

.. GENERATED FROM PYTHON SOURCE LINES 71-82

.. code-block:: default

    Smaps, SOS = get_Smaps(
        k_space=kspace_obs,
        img_shape=fourier_op.shape,
        samples=kspace_loc,
        thresh=(0.05, 0.05, 0.05),  # The cutoff threshold in each kspace
                                    # direction between 0 and kspace_max (0.5)
        min_samples=kspace_loc.min(axis=0),
        max_samples=kspace_loc.max(axis=0),
        density_comp=density_comp,
        mode='NFFT',
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/mrinufft/_utils.py:36: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/mrinufft/operators/base.py:434: UserWarning: coeffs should be of dtype complex128. Casting it for you.
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 83-84

View Input

.. GENERATED FROM PYTHON SOURCE LINES 84-90

.. code-block:: default

    for i in range(9):
        plt.subplot(3, 3, i+1)
        plt.imshow(np.abs(Smaps[i][..., 80]), cmap='gray')
    plt.suptitle("Sensitivty Maps")
    plt.show()




.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_002.png
   :alt: Sensitivty Maps
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_002.png, /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_002_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py:88: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 91-92

Density Compensation adjoint:

.. GENERATED FROM PYTHON SOURCE LINES 92-108

.. code-block:: default

    fourier_op_sense_dc = NonCartesianFFT(
        samples=kspace_loc,
        shape=cartesian.shape,
        implementation='gpuNUFFT',
        n_coils=image.shape[0],
        density_comp=density_comp,
        smaps=Smaps,
    )
    # This preconditions k-space giving a result closer to inverse
    image_rec = fourier_op_sense_dc.adj_op(kspace_obs)
    recon_ssim = ssim(image_rec, cartesian, mask=np.abs(image)>np.mean(np.abs(image)))
    plt.imshow(np.abs(image_rec)[..., 80], cmap='gray')
    plt.title('Density Compensated Adjoint : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()





.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_003.png
   :alt: Density Compensated Adjoint : SSIM = 0.46
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_003.png, /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_003_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/mrinufft/operators/interfaces/gpunufft.py:138: UserWarning: no pinning provided, pinning existing smaps now.
      warnings.warn("no pinning provided, pinning existing smaps now.")
    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py:105: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 109-114

FISTA optimization
------------------

We now want to refine the zero order solution using a FISTA optimization.
The cost function is set to Proximity Cost + Gradient Cost

.. GENERATED FROM PYTHON SOURCE LINES 114-130

.. code-block:: default


    # Setup the operators
    linear_op = WaveletN(
        wavelet_name='sym8',
        nb_scale=4,
        dim=3,
    )
    regularizer_op = SparseThreshold(Identity(), 1e-11, thresh_type="soft")
    # Setup Reconstructor
    reconstructor = SelfCalibrationReconstructor(
        fourier_op=fourier_op_sense_dc,
        linear_op=linear_op,
        regularizer_op=regularizer_op,
        gradient_formulation='synthesis',
        verbose=1,
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/pywt/_multilevel.py:43: UserWarning: Level value of 4 is too high: all coefficients will experience boundary effects.
      warnings.warn(
    WARNING: Making input data immutable.
    Lipschitz constant is 0.0734470270574093
    The lipschitz constraint is satisfied




.. GENERATED FROM PYTHON SOURCE LINES 131-132

Run the FISTA reconstruction and view results

.. GENERATED FROM PYTHON SOURCE LINES 132-141

.. code-block:: default

    image_rec, costs, metrics = reconstructor.reconstruct(
        kspace_data=kspace_obs,
        optimization_alg='fista',
        num_iterations=30,
    )
    recon_ssim = ssim(image_rec, cartesian)
    plt.imshow(np.abs(image_rec)[..., 80], cmap='gray')
    plt.title('Iterative Reconstruction : SSIM = ' + str(np.around(recon_ssim, 2)))
    plt.show()



.. image-sg:: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_004.png
   :alt: Iterative Reconstruction : SSIM = 0.64
   :srcset: /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_004.png, /auto_examples/pysap-mri/images/sphx_glr_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation_004_2_0x.png 2.0x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING: Making input data immutable.
    /volatile/Chaithya/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/pywt/_multilevel.py:43: UserWarning: Level value of 4 is too high: all coefficients will experience boundary effects.
      warnings.warn(
     - mu:  1e-11
     - lipschitz constant:  0.0734470270574093
     - data:  (128, 128, 160)
     - wavelet:  <mri.operators.linear.wavelet.WaveletN object at 0x7f147ea8aaa0> - 4
     - max iterations:  30
     - image variable shape:  (128, 128, 160)
     - alpha variable shape:  (4017261,)
    ----------------------------------------
    Starting optimization...
      0%|          | 0/30 [00:00<?, ?it/s]      3%|3         | 1/30 [00:03<01:39,  3.43s/it]      7%|6         | 2/30 [00:06<01:35,  3.42s/it]     10%|#         | 3/30 [00:10<01:31,  3.40s/it]     13%|#3        | 4/30 [00:13<01:28,  3.40s/it]     17%|#6        | 5/30 [00:17<01:24,  3.40s/it]     20%|##        | 6/30 [00:20<01:21,  3.40s/it]     23%|##3       | 7/30 [00:23<01:18,  3.40s/it]     27%|##6       | 8/30 [00:27<01:14,  3.40s/it]     30%|###       | 9/30 [00:30<01:11,  3.39s/it]     33%|###3      | 10/30 [00:33<01:07,  3.39s/it]     37%|###6      | 11/30 [00:37<01:04,  3.39s/it]     40%|####      | 12/30 [00:40<01:01,  3.40s/it]     43%|####3     | 13/30 [00:44<00:57,  3.40s/it]     47%|####6     | 14/30 [00:47<00:54,  3.40s/it]     50%|#####     | 15/30 [00:50<00:50,  3.40s/it]     53%|#####3    | 16/30 [00:54<00:47,  3.39s/it]     57%|#####6    | 17/30 [00:57<00:44,  3.39s/it]     60%|######    | 18/30 [01:01<00:40,  3.39s/it]     63%|######3   | 19/30 [01:04<00:37,  3.39s/it]     67%|######6   | 20/30 [01:07<00:33,  3.39s/it]     70%|#######   | 21/30 [01:11<00:30,  3.39s/it]     73%|#######3  | 22/30 [01:14<00:27,  3.39s/it]     77%|#######6  | 23/30 [01:18<00:23,  3.39s/it]     80%|########  | 24/30 [01:21<00:20,  3.39s/it]     83%|########3 | 25/30 [01:24<00:16,  3.39s/it]     87%|########6 | 26/30 [01:28<00:13,  3.39s/it]     90%|######### | 27/30 [01:31<00:10,  3.39s/it]     93%|#########3| 28/30 [01:35<00:06,  3.40s/it]     97%|#########6| 29/30 [01:38<00:03,  3.40s/it]    100%|##########| 30/30 [01:41<00:00,  3.40s/it]    100%|##########| 30/30 [01:41<00:00,  3.40s/it]
     - final iteration number:  30
     - final log10 cost value:  6.0
     - converged:  False
    Done.
    Execution time:  101.86652915691957  seconds
    ----------------------------------------
    /volatile/Chaithya/actions-runner/_work/pysap/pysap/examples/pysap-mri/GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py:140: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  48.423 seconds)


.. _sphx_glr_download_auto_examples_pysap-mri_GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/cea-cosmic/pysap/gh-pages?urlpath=lab/tree/notebooks/auto_examples/pysap-mri/GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py <GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.ipynb <GPU_NonCartesian_gpuNUFFT_SENSE_DensityCompensation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
